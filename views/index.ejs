<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BioGuard - Water Monitoring System</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/paginate-it@4.1.0/dist/paginate-it.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        header {
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin-bottom: 20px;
            align-items: center;
        }
        #logo {
            max-width: 200px;
            margin-bottom: 10px;
        }
        h1 {
            font-size: 2em;
            margin: 0;
        }
        #mapContainer {
            width: 600px;
            height: 400px;
            margin: 20px;
        }
        table {
            width: 100%;
            max-width: 800px;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #4CAF50;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #ddd;
        }
        footer {
            width: 100%;
            text-align: center;
            margin-top: 20px;
            font-size: 0.9em;
            color: #666;
        }
        .leaflet-marker-icon.current-location {
            background-image: url('images/current-location-icon.png');
            background-size: 50px 50px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(0, 0, 255, 0.8);
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        #chartContainer {
            width: 600px;
            height: 400px;
            margin: 20px;
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination a {
            padding: 8px 12px;
            margin: 0 5px;
            border: 1px solid #ccc;
            background-color: #fff;
            text-decoration: none;
            color: #333;
        }
        .pagination a.active {
            background-color: #4CAF50;
            color: white;
        }
    </style>
</head>
<body>
    <header>
        <img id="logo" src="/images/Bioguard.jpg" alt="Bioguard Logo">
        <h1>Real-Time Water Quality Monitoring</h1>
    </header>
    
    <table id="gpsTable">
        <thead>
            <tr>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Altitude</th>
                <th>HDOP</th>
                <th>Temperature</th>
                <th>PH</th>
                <th>Dissolved Solids</th>
                <th>Timestamp</th>
                <th>F-PORT</th>
            </tr>
        </thead>
        <tbody>
            <% gpsDataArray.forEach(function(entry) { %>
                <tr>
                    <td><%= entry.latitude %></td>
                    <td><%= entry.longitude %></td>
                    <td><%= entry.altitude %></td>
                    <td><%= entry.hdop %></td>
                    <td><%= entry.temperature %></td>
                    <td><%= entry.ph %></td>
                    <td><%= entry.dissolvedsolids %></td>
                    <td><%= new Date(entry.timestamp).toLocaleString() %></td>
                    <td><%= entry.f_port %></td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    
    <div class="pagination" id="pagination"></div>
    <div id="mapContainer"></div>
    <div id="chartContainer">
        <canvas id="temperatureChart"></canvas>
    </div>
    
    <footer>
        &copy; 2024 Bioguard. All rights reserved.
    </footer>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
    
    <script>
        const socket = io();
        const itemsPerPage = 15;
        let gpsData = <%- JSON.stringify(gpsDataArray) %>;

        socket.on('gpsDataUpdate', (newData) => {
            gpsData.push(newData);
            displayData(gpsData);
            updatePagination();
            updateMap(gpsData);
            if (gpsData.length > 0) {
                updateChart(
                    gpsData.map(entry => entry.temperature), 
                    gpsData.map(entry => new Date(entry.timestamp).toLocaleString())
                );
            }
        });

        function displayData(data) {
            const tableBody = document.querySelector('#gpsTable tbody');
            tableBody.innerHTML = '';
            const dataToDisplay = data
                .slice()
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .slice(0, 10);
            
            dataToDisplay.forEach(entry => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${entry.latitude}</td>
                    <td>${entry.longitude}</td>
                    <td>${entry.altitude}</td>
                    <td>${entry.hdop}</td>
                    <td>${entry.temperature}</td>
                    <td>${entry.ph}</td>
                    <td>${entry.dissolvedsolids}</td>
                    <td>${new Date(entry.timestamp).toLocaleString()}</td>
                    <td>${entry.f_port}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        function updatePagination() {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';
            const totalPages = Math.ceil(gpsData.length / itemsPerPage);
            if (totalPages > 1 && gpsData.length > 0) {
                paginateIt({
                    itemsPerPage: itemsPerPage,
                    items: gpsData,
                    container: paginationContainer,
                    onSelect: (items) => {
                        displayData(items);
                    }
                });
            }
        }

        const map = L.map('mapContainer').setView([0, 0], 2);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        function updateMap(gpsData) {
            map.eachLayer(layer => {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            const latestLocation = gpsData.find(item => 
                item.latitude !== null && 
                item.longitude !== null && 
                item.latitude !== 'N/A' && 
                item.longitude !== 'N/A'
            );

            if (latestLocation) {
                const marker = L.marker([latestLocation.latitude, latestLocation.longitude])
                    .addTo(map)
                    .bindPopup(`
                        Latitude: ${latestLocation.latitude}<br>
                        Longitude: ${latestLocation.longitude}<br>
                        Temperature: ${latestLocation.temperature}°C<br>
                        PH: ${latestLocation.ph}<br>
                        Dissolved Solids: ${latestLocation.dissolvedsolids}<br>
                        Timestamp: ${new Date(latestLocation.timestamp).toLocaleString()}
                    `)
                    .openPopup();

                const bounds = gpsData.reduce((bounds, entry) => {
                    if (entry.latitude !== null && entry.longitude !== null) {
                        return bounds.extend([entry.latitude, entry.longitude]);
                    }
                    return bounds;
                }, L.latLngBounds());

                if (bounds.isValid()) {
                    map.fitBounds(bounds);
                }
            }
        }

        function updateChart(temperatures, timestamps) {
            const ctx = document.getElementById('temperatureChart').getContext('2d');
            if (window.myChart) {
                window.myChart.destroy();
            }
            window.myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: timestamps,
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: temperatures,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: true,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)'
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    animation: {
                        duration: 0
                    }
                }
            });
        }

        // Initial data display
        displayData(gpsData);
        updatePagination();
        updateMap(gpsData);
        if (gpsData.length > 0) {
            updateChart(
                gpsData.map(entry => entry.temperature),
                gpsData.map(entry => new Date(entry.timestamp).toLocaleString())
            );
        }
    </script>
</body>
</html>
